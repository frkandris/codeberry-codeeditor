<!-- Editor start -->
<div class="container-fluid fullHeight">
  <div class="cog-container">
    <div class="dropdown">
      <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <i class="fas fa-cog"></i>
      </button>
      <button class="btn btn-secondary btn-sm" id="playButton">
        <i class="fas fa-play"></i>
      </button>

      <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        <a class="dropdown-item" href="/edit/">New editor</a>
        <a class="dropdown-item" href="/view/{{codeEditorInstanceId}}" target="_blank">View result in a new tab</a>
        <div class="dropdown-divider"></div>
        <a class="dropdown-item" href="#" id="menuItemToggleHTML">Hide HTML panel</a>
        <a class="dropdown-item" href="#" id="menuItemToggleCSS">Hide CSS panel</a>
        <a class="dropdown-item" href="#" id="menuItemToggleJS">Hide JavaScript panel</a>
        <a class="dropdown-item" href="#" id="menuItemToggleConsole">Hide Console</a>
        <a class="dropdown-item" href="#" id="menuItemToggleResult">Hide Result</a>
        <a class="dropdown-item" href="#" id="menuItemToggleValidatorResult">Hide Validator</a>
        <div class="dropdown-divider"></div>
        <a class="dropdown-item" href="#" id="menuItemToggleAutoRun">Disable Autorun</a>
        <a class="dropdown-item" href="#" id="menuItemRunCode"><i class="fas fa-play"></i> Refresh Result panel (Ctrl+Enter/Cmd+Enter)</a>
      </div>
    </div>
  </div>

  <div class="row no-gutters fullHeight">
    <div id="columnForHTMLEditor" class="col-sm">
      <div class="text-center">HTML</div>
      <textarea id="editorForHTML">{{htmlText}}</textarea>
    </div>
    <div id="columnForCSSEditor" class="col-sm">
      <div class="text-center">CSS</div>
      <textarea id="editorForCSS">{{cssText}}</textarea>
    </div>
    <div id="columnForJSEditor" class="col-sm">
      <div class="text-center">JavaScript</div>
      <textarea id="editorForJS">{{javascriptText}}</textarea>
    </div>
    <div id="columnForConsole" class="col-sm">
      <div class="text-center">Console</div>
      <div id="log"></div>
    </div>
    <div id="columnForResult" class="col-sm">
      <div class="text-center">Result</div>
      <iframe id="resultIFrame"></iframe>
    </div>
    <div id="columnForValidatorResult" class="col-sm">
      <div class="text-center">Validator Result</div>
      <div id="validatorResult">
        <ul class="fa-ul">
          <li id="validatorResult1ListItem" class="text-danger"><i id="validatorResult1Check" class="fa-li far fa-square"></i> Document has a &lt;H1&gt; tag</li>
          <li id="validatorResult2ListItem" class="text-danger"><i id="validatorResult2Check" class="fa-li far fa-square"></i> The content of the &lt;H1&gt;&lt;/H1&gt; tag is "almafa"</li>
        </ul>
      </div>
    </div>
  </div>
</div>
<input type="hidden" name="codeEditorInstanceId" value="{{codeEditorInstanceId}}" />
<!-- Editor end -->


<script>

  // Create editor instances using CodeMirror

  var editorInstanceForHTML = CodeMirror.fromTextArea(editorForHTML, {
    lineNumbers: true,
    lineWrapping: true,
    theme: 'monokai',
    mode: 'text/html'
  });
  var editorInstanceForCSS = CodeMirror.fromTextArea(editorForCSS, {
    lineNumbers: true,
    lineWrapping: true,
    theme: 'monokai',
    mode: 'css'
  });
  var editorInstanceForJS = CodeMirror.fromTextArea(editorForJS, {
    lineNumbers: true,
    lineWrapping: true,
    theme: 'monokai',
    mode: 'javascript'
  });


  // Create bindings – if the editor changes, store content in localStorage and refresh Result iframe

  editorInstanceForHTML.on('change', function () {
    localStorage.setItem('htmlText', editorInstanceForHTML.getValue());
    refreshresultIFrame(isAutoRunEnabled);
    sendDataToServer();
    checkCodeWithValidator();
  });
  editorInstanceForCSS.on('change', function () {
    localStorage.setItem('cssText', editorInstanceForCSS.getValue());
    refreshresultIFrame(isAutoRunEnabled);
    sendDataToServer();
    checkCodeWithValidator();
  });
  editorInstanceForJS.on('change', function () {
    localStorage.setItem('javascriptText', editorInstanceForJS.getValue());
    refreshresultIFrame(isAutoRunEnabled);
    sendDataToServer();
    checkCodeWithValidator();
  });


  // This is how we start – store editor in localStorage and refresh Result panel

  localStorage.setItem('htmlText', editorInstanceForHTML.getValue());
  localStorage.setItem('cssText', editorInstanceForCSS.getValue());
  localStorage.setItem('javascriptText', editorInstanceForJS.getValue());
  refreshresultIFrame(isAutoRunEnabled);
  sendDataToServer();
  checkCodeWithValidator();


  // Function to refresh the Result panel

  function refreshresultIFrame(isRunningEnabled) {

    // If the running is not enabled (for example autorun is disabled), we return without refreshing the Result panel
    if (isRunningEnabled == false) {
      return;
    }


    // Get the iFrame from the DOM
    var resultIFrame = $('#resultIFrame');

    // Get the HTML+CSS+JS panel content from the localStorage
    var htmlText = localStorage.getItem('htmlText');
    var cssText = localStorage.getItem('cssText');
    var javascriptText = localStorage.getItem('javascriptText');

    // Console logging function, that will be called inside in the Result panel, to display console results in the Console panel
    var loggerFunction = " \
var log = parent.document.querySelector('#log'); \
['log','debug','info','warn','error'].forEach(function (verb) { \
    console[verb] = (function (method, verb, log) { \
        return function () { \
            var msg = document.createElement('div'); \
            msg.classList.add(verb); \
            msg.textContent = Array.prototype.slice.call(arguments).join(' '); \
            log.appendChild(msg); \
        }; \
    })(console[verb], verb, log); \
}); \
window.onerror = function(message, url, linenumber) { \
	console.error(message); \
}; \
";
    
    // Concatenate html+css+js+logger into 1 string
    var resultText = '\<html\>\<head\>\<style\>' + cssText + '\<\/style\>\<\/head\>\<body\>' + htmlText + '\<script\>' + loggerFunction + javascriptText + '\<\/script\>\<\/body\>\</html\>';

    // Render the Results panel iframe
    resultIFrame.contents().find('body').html(resultText);

    // Other version: use the result viewer from the server
    // resultIFrame.attr('src', '../view/{{codeEditorInstanceId}}');

    // Scroll to bottom of the console
    document.getElementById('log').scrollTop = document.getElementById('log').scrollHeight;
  }


// Send the panel data to the server via Ajax

function sendDataToServer(){

  // Get HTML+CSS+JS panel content from the localStorage
  var htmlText = localStorage.getItem('htmlText');
  var cssText = localStorage.getItem('cssText');
  var javascriptText = localStorage.getItem('javascriptText');

  // Send HTML+CSS+JS panel data to the server via Ajax
  $.ajax({
    url: '/save/',
    type: 'POST',
    data: {
      codeEditorInstanceId: '{{codeEditorInstanceId}}',
      htmlText: htmlText,
      cssText: cssText,
      javascriptText: javascriptText
    },
    success: function (data) {
    }
  });

}


// Show/hide editor panels based on GET parameters, eg. URL?html=0 -> do not display HTML panel

  // helper functions 
  function getURLParameters() {
    var prmstr = window.location.search.substr(1);
    return prmstr != null && prmstr != '' ? transformToAssocArray(prmstr) : {};
  }
  function transformToAssocArray(prmstr) {
    var params = {};
    var prmarr = prmstr.split('&');
    for (var i = 0; i < prmarr.length; i++) {
      var tmparr = prmarr[i].split('=');
      params[tmparr[0]] = tmparr[1];
    }
    return params;
  }

  var params = getURLParameters();

  // hide panels based on GET paramteres, eg. URL?html=0 -> do not display HTML panel

  if (params.html == 0) {
    $('#columnForHTMLEditor').hide();
  }
  if (params.css == 0) {
    $('#columnForCSSEditor').hide();
  }
  if (params.js == 0) {
    $('#columnForJSEditor').hide();
  }
  if (params.console == 0) {
    $('#columnForConsole').hide();
  }


  // Create bindings – if the user selects "Show/hide X" from the cog-settings menu, toggle the panel and change the menu item text

  $('#menuItemToggleHTML').click(function (e) {
    $('#columnForHTMLEditor').toggle();
    if ($('#menuItemToggleHTML').text() == "Hide HTML panel") {
      $('#menuItemToggleHTML').text("Show HTML panel"); 
    } else {
      $('#menuItemToggleHTML').text("Hide HTML panel"); 
    }
    refreshEditors();
    e.preventDefault();
  });
  $('#menuItemToggleCSS').click(function (e) {
    $('#columnForCSSEditor').toggle();
    if ($('#menuItemToggleCSS').text() == "Hide CSS panel") {
      $('#menuItemToggleCSS').text("Show CSS panel"); 
    } else {
      $('#menuItemToggleCSS').text("Hide CSS panel"); 
    }
    refreshEditors();
    e.preventDefault();
  });
  $('#menuItemToggleJS').click(function (e) {
    $('#columnForJSEditor').toggle();
    if ($('#menuItemToggleJS').text() == "Hide JavaScript panel") {
      $('#menuItemToggleJS').text("Show JavaScript panel"); 
    } else {
      $('#menuItemToggleJS').text("Hide JavaScript panel"); 
    }
    refreshEditors();
    e.preventDefault();
  });
  $('#menuItemToggleConsole').click(function (e) {
    $('#columnForConsole').toggle();
    if ($('#menuItemToggleConsole').text() == "Hide Console") {
      $('#menuItemToggleConsole').text("Show Console"); 
    } else {
      $('#menuItemToggleConsole').text("Hide Console"); 
    }
    refreshEditors();
    e.preventDefault();
  });
  $('#menuItemToggleResult').click(function (e) {
    $('#columnForResult').toggle();
    if ($('#menuItemToggleResult').text() == "Hide Result") {
      $('#menuItemToggleResult').text("Show Result"); 
    } else {
      $('#menuItemToggleResult').text("Hide Result"); 
    }
    refreshEditors();
    e.preventDefault();
  });
  $('#menuItemToggleValidatorResult').click(function (e) {
    $('#columnForValidatorResult').toggle();
    if ($('#menuItemToggleValidatorResult').text() == "Hide Validator") {
      $('#menuItemToggleValidatorResult').text("Show Validator"); 
    } else {
      $('#menuItemToggleValidatorResult').text("Hide Validator"); 
    }
    refreshEditors();
    e.preventDefault();
  });



  // Create binding – if the user selects "Enable/disable Autorun" from the cog-settings menu, toggle the auto-run feature

  // init
  var isAutoRunEnabled = true;

  $('#menuItemToggleAutoRun').click(function (e) {
    if ($('#menuItemToggleAutoRun').text() == "Disable Autorun") {
      $('#menuItemToggleAutoRun').text("Enable Autorun"); 
      isAutoRunEnabled = false;
    } else {
      $('#menuItemToggleAutoRun').text("Disable Autorun"); 
      isAutoRunEnabled = true;
    }
    e.preventDefault();
  });



  // Create bindings – if the user presses one of these, refresh Result panel:
  // - the play button
  // - the play button in the cog-settings menu
  // - Cmd/Ctrl+Enter outside CodeMirror editor
  // - Cmd/Ctrl+Enter inside CodeMirror editor

  // - the play button
  $('#playButton').click(function (e) {
    refreshresultIFrame(true);
  });

  // - the play button in the cog-settings menu
  $('#menuItemRunCode').click(function (e) {
      refreshresultIFrame(true);
  });

  // - Cmd/Ctrl+Enter outside CodeMirror editor
  hotkeys('command+enter, ctrl+enter', function(event,handler) {
    refreshresultIFrame(true);
  });

  // - Cmd/Ctrl+Enter inside CodeMirror editor
  editorInstanceForHTML.setOption("extraKeys", { 
    "Cmd-Enter": function(cm) {
      refreshresultIFrame(true);
    },
    "Ctrl-Enter": function(cm) {
      refreshresultIFrame(true);
    }
  });
  editorInstanceForCSS.setOption("extraKeys", { 
    "Cmd-Enter": function(cm) {
      refreshresultIFrame(true);
    },
    "Ctrl-Enter": function(cm) {
      refreshresultIFrame(true);
    }
  });
  editorInstanceForJS.setOption("extraKeys", { 
    "Cmd-Enter": function(cm) {
      refreshresultIFrame(true);
    },
    "Ctrl-Enter": function(cm) {
      refreshresultIFrame(true);
    }
  });


  // Send HTML+CSS+JS data to server, get back validation data, update Validator panel accordingly

  function checkCodeWithValidator() {

    // Get HTML+CSS+JS panel content from the localStorage
    var htmlText = localStorage.getItem('htmlText');
    var cssText = localStorage.getItem('cssText');
    var javascriptText = localStorage.getItem('javascriptText');

    // Send HTML+CSS+JS panel data to the server via Ajax
    $.ajax({
      url: '/validate/',
      type: 'POST',
      data: {
        codeEditorInstanceId: '{{codeEditorInstanceId}}',
        htmlText: htmlText,
        cssText: cssText,
        javascriptText: javascriptText
      },
      // Get back code validation data
      success: function (validatorResult) {
        var arrayResultFromValidator = JSON.parse(validatorResult);

        // if the result is positive, update Validator panel
        if (arrayResultFromValidator["validatorRule1Result"] == true) {
          $('#validatorResult1Check').removeClass("fa-square");
          $('#validatorResult1Check').addClass("fa-check-square");
          $('#validatorResult1ListItem').removeClass("text-danger");
          $('#validatorResult1ListItem').addClass("text-success");
        } else {
          $('#validatorResult1Check').removeClass("fa-check-square");
          $('#validatorResult1Check').addClass("fa-square");
          $('#validatorResult1ListItem').removeClass("text-success");
          $('#validatorResult1ListItem').addClass("text-danger");
        }

        if (arrayResultFromValidator["validatorRule2Result"] == true) {
          $('#validatorResult2Check').removeClass("fa-square");
          $('#validatorResult2Check').addClass("fa-check-square");
          $('#validatorResult2ListItem').removeClass("text-danger");
          $('#validatorResult2ListItem').addClass("text-success");
        } else {
          $('#validatorResult2Check').removeClass("fa-check-square");
          $('#validatorResult2Check').addClass("fa-square");
          $('#validatorResult2ListItem').removeClass("text-success");
          $('#validatorResult2ListItem').addClass("text-danger");
        }

      }
    });

    return;
  }


  // Refresh editors - needed when we show/hide panels, otherwise cursors are off

  function refreshEditors() {
    editorInstanceForHTML.refresh();
    editorInstanceForCSS.refresh();
    editorInstanceForJS.refresh();
  }
</script>