<!-- Editor start -->
<div class="container-fluid fullHeight">
  <div class="row no-gutters fullHeight">
    <div id="columnForHTMLEditor" class="col-sm">
      <div>HTML</div>
      <textarea id="editorForHTML">{{htmlText}}</textarea>
    </div>
    <div id="columnForCSSEditor" class="col-sm">
      <div>CSS</div>
      <textarea id="editorForCSS">{{cssText}}</textarea>
    </div>
    <div id="columnForJSEditor" class="col-sm">
      <div>JavaScript</div>
      <textarea id="editorForJS">{{javascriptText}}</textarea>
    </div>
    <div id="columnForConsole" class="col-sm">
      <div>Console</div>
      <div id="log"></div>
    </div>
    <div id="columnForResult" class="col-sm">
      <div>Result</div>
      <iframe id="resultIFrame"></iframe>
    </div>
  </div>
</div>
<input type="hidden" name="codeEditorInstanceId" value="{{codeEditorInstanceId}}" />
<!-- Editor end -->


<script>

  // Create editor instances using CodeMirror

  var editorInstanceForHTML = CodeMirror.fromTextArea(editorForHTML, {
    lineNumbers: true,
    lineWrapping: true,
    theme: 'railscasts',
    mode: 'text/html'
  });
  var editorInstanceForCSS = CodeMirror.fromTextArea(editorForCSS, {
    lineNumbers: true,
    lineWrapping: true,
    theme: 'railscasts',
    mode: 'css'
  });
  var editorInstanceForJS = CodeMirror.fromTextArea(editorForJS, {
    lineNumbers: true,
    lineWrapping: true,
    theme: 'railscasts',
    mode: 'javascript'
  });


  // Create bindings – if the editor changes, store content in localStorage and refresh Result iframe

  editorInstanceForHTML.on('change', function () {
    localStorage.setItem('htmlText', editorInstanceForHTML.getValue());
    refreshresultIFrame();
    sendDataToServer();
  });
  editorInstanceForCSS.on('change', function () {
    localStorage.setItem('cssText', editorInstanceForCSS.getValue());
    refreshresultIFrame();
    sendDataToServer();
  });
  editorInstanceForJS.on('change', function () {
    localStorage.setItem('javascriptText', editorInstanceForJS.getValue());
    refreshresultIFrame();
    sendDataToServer();
  });


  // This is how we start – store editor in localStorage and refresh Result panel

  localStorage.setItem('htmlText', editorInstanceForHTML.getValue());
  localStorage.setItem('cssText', editorInstanceForCSS.getValue());
  localStorage.setItem('javascriptText', editorInstanceForJS.getValue());
  refreshresultIFrame();
  sendDataToServer();


  // Function to refresh the Result panel

  function refreshresultIFrame() {

    // Get the iFrame from the DOM
    var resultIFrame = $('#resultIFrame');

    // Get the HTML+CSS+JS panel content from the localStorage
    var htmlText = localStorage.getItem('htmlText');
    var cssText = localStorage.getItem('cssText');
    var javascriptText = localStorage.getItem('javascriptText');

    // Console logging function, that will be called inside in the Result panel, to display console results in the Console panel
    var loggerFunction = " \
var log = parent.document.querySelector('#log'); \
['log','debug','info','warn','error'].forEach(function (verb) { \
    console[verb] = (function (method, verb, log) { \
        return function () { \
            var msg = document.createElement('div'); \
            msg.classList.add(verb); \
            msg.textContent = Array.prototype.slice.call(arguments).join(' '); \
            log.appendChild(msg); \
        }; \
    })(console[verb], verb, log); \
}); \
window.onerror = function(message, url, linenumber) { \
	console.error(message); \
}; \
";
    
    // Concatenate html+css+js+logger into 1 string
    var resultText = '\<html\>\<head\>\<style\>' + cssText + '\<\/style\>\<\/head\>\<body\>' + htmlText + '\<script\>' + loggerFunction + javascriptText + '\<\/script\>\<\/body\>\</html\>';

    // Render the Results panel iframe
    resultIFrame.contents().find('body').html(resultText);

    // Other version: use the result viewer from the server
    // resultIFrame.attr('src', '../view/{{codeEditorInstanceId}}');

    // Scroll to bottom of the console
    document.getElementById('log').scrollTop = document.getElementById('log').scrollHeight;
  }


// Send the panel data to the server via Ajax

function sendDataToServer(){

  // Get HTML+CSS+JS panel content from the localStorage
  var htmlText = localStorage.getItem('htmlText');
  var cssText = localStorage.getItem('cssText');
  var javascriptText = localStorage.getItem('javascriptText');

  // Send HTML+CSS+JS panel data to the server via Ajax
  $.ajax({
    url: '/save/',
    type: 'POST',
    data: {
      codeEditorInstanceId: '{{codeEditorInstanceId}}',
      htmlText: htmlText,
      cssText: cssText,
      javascriptText: javascriptText
    },
    success: function (data) {
    }
  });

}


// Show/hide editor panels based on GET parameters, eg. URL?html=0 -> do not display HTML panel

  // helper functions 
  function getURLParameters() {
    var prmstr = window.location.search.substr(1);
    return prmstr != null && prmstr != "" ? transformToAssocArray(prmstr) : {};
  }
  function transformToAssocArray(prmstr) {
    var params = {};
    var prmarr = prmstr.split("&");
    for (var i = 0; i < prmarr.length; i++) {
      var tmparr = prmarr[i].split("=");
      params[tmparr[0]] = tmparr[1];
    }
    return params;
  }

  var params = getURLParameters();

  // hide panels based on GET paramteres, eg. URL?html=0 -> do not display HTML panel

  if (params.html == 0) {
    $("#columnForHTMLEditor").hide();
  }
  if (params.css == 0) {
    $("#columnForCSSEditor").hide();
  }
  if (params.js == 0) {
    $("#columnForJSEditor").hide();
  }
  if (params.console == 0) {
    $("#columnForConsole").hide();
  }

</script>