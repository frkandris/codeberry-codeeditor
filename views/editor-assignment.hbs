<!-- Editor start -->
<div class="container-fluid fullHeight">

  <div class="row no-gutters fullHeight">
    <div id="columnForEditor" class="col-sm">
      <textarea id="editorForAssignment">{{assignmentText}}</textarea>
    </div>
    <div id="columnForResult" class="col-sm">
      <iframe id="resultIFrame"></iframe>
    </div>
    <div id="columnForValidatorResult" class="col-sm">
      <div id="validatorResult">
        <ul class="fa-ul">
          <li id="validatorResult1ListItem" class="text-danger"><i id="validatorResult1Check" class="fa-li far fa-square"></i> {{validatorText}}</li>
        </ul>
      </div>
    </div>
  </div>
</div>
<div style="display:none;">
  <textarea id="editorForHTML">{{htmlText}}</textarea>
  <textarea id="editorForCSS">{{cssText}}</textarea>
  <textarea id="editorForJavascript">{{javascriptText}}</textarea>
</div>
<input type="hidden" name="codeEditorInstanceId" value="{{codeEditorInstanceId}}" />
<!-- Editor end -->


<script>

  var isAutoRunEnabled = true;

  // Create editor instances using CodeMirror

  var editorInstanceForAssignment = CodeMirror.fromTextArea(editorForAssignment, {
    lineNumbers: true,
    lineWrapping: true,
    theme: 'monokai',
    mode: 'css'
  });
  editorInstanceForAssignment.setOption("extraKeys", {
    "Enter": function() {return editorInstanceForAssignment.PASS;},
  });

  // the line numbers to be "readonly"
  var readOnlyLines = [0,2];
  // listen for the beforeChange event, test the changed line number, and cancel
  editorInstanceForAssignment.on('beforeChange',function(cm,change) {
    if ( ~readOnlyLines.indexOf(change.from.line) ) {
        change.cancel();
    }
  });
  editorInstanceForAssignment.addLineClass(1, 'background', 'line-focus');
  editorInstanceForAssignment.focus();
  editorInstanceForAssignment.setCursor({line: 1, ch: 0});

  // Create bindings – if the editor changes, store content in localStorage and refresh Result iframe

  editorInstanceForAssignment.on('change', function () {
    localStorage.setItem('assignmentText', editorInstanceForAssignment.getValue());
    refreshresultIFrame(isAutoRunEnabled);
    sendDataToServer();
    checkCodeWithValidator();
  });


  // This is how we start – store editor in localStorage and refresh Result panel

  localStorage.setItem('htmlText', $('#editorForHTML').text());
  localStorage.setItem('cssText', $('#editorForCSS').text());
  localStorage.setItem('javascriptText', $('#editorForJavascript').text());
  localStorage.setItem('assignmentText', editorInstanceForAssignment.getValue());
  refreshresultIFrame(isAutoRunEnabled);
  sendDataToServer();
  checkCodeWithValidator();


  // Function to refresh the Result panel

  function refreshresultIFrame(isRunningEnabled) {

    // If the running is not enabled (for example autorun is disabled), we return without refreshing the Result panel
    if (isRunningEnabled == false) {
      return;
    }


    // Get the iFrame from the DOM
    var resultIFrame = $('#resultIFrame');

    // Get the HTML+CSS+JS panel content from the localStorage
    var htmlText = localStorage.getItem('htmlText');
    var cssText = localStorage.getItem('cssText');
    var javascriptText = localStorage.getItem('javascriptText');
    var assignmentText = localStorage.getItem('assignmentText');

    // Console logging function, that will be called inside in the Result panel, to display console results in the Console panel
    var loggerFunction = " \
var log = parent.document.querySelector('#log'); \
['log','debug','info','warn','error'].forEach(function (verb) { \
    console[verb] = (function (method, verb, log) { \
        return function () { \
            var msg = document.createElement('div'); \
            msg.classList.add(verb); \
            msg.textContent = Array.prototype.slice.call(arguments).join(' '); \
            log.appendChild(msg); \
        }; \
    })(console[verb], verb, log); \
}); \
window.onerror = function(message, url, linenumber) { \
	console.error(message); \
}; \
";
    
    // Concatenate html+css+js+logger into 1 string
    // var resultText = '\<html\>\<head\>\<style\>' + cssText + '\<\/style\>\<\/head\>\<body\>' + htmlText + '\<script\>' + loggerFunction + javascriptText + '\<\/script\>\<\/body\>\</html\>';
    var resultText = '\<html\>\<head\>\<style\>' + cssText + assignmentText + '\<\/style\>\<\/head\>\<body\>' + htmlText + '\<script\>' + javascriptText + '\<\/script\>\<\/body\>\</html\>';

    // Render the Results panel iframe
    resultIFrame.contents().find('body').html(resultText);

    // Other version: use the result viewer from the server
    // resultIFrame.attr('src', '../view/{{codeEditorInstanceId}}');

    // Scroll to bottom of the console
    // document.getElementById('log').scrollTop = document.getElementById('log').scrollHeight;
  }


// Send the panel data to the server via Ajax

function sendDataToServer(){

  // Get HTML+CSS+JS panel content from the localStorage
  // var htmlText = localStorage.getItem('htmlText');
  // var cssText = localStorage.getItem('cssText');
  // var javascriptText = localStorage.getItem('javascriptText');
  var assignmentText = localStorage.getItem('assignmentText');

  // Send HTML+CSS+JS panel data to the server via Ajax
  $.ajax({
    url: '/a/save/',
    type: 'POST',
    data: {
      codeEditorInstanceId: '{{codeEditorInstanceId}}',
      assignmentText: assignmentText
    },
    success: function (data) {
    }
  });

}


  // Send HTML+CSS+JS data to server, get back validation data, update Validator panel accordingly

  function checkCodeWithValidator() {

    // Get HTML+CSS+JS panel content from the localStorage
    var htmlText = localStorage.getItem('htmlText');
    var cssText = localStorage.getItem('cssText');
    var javascriptText = localStorage.getItem('javascriptText');
    var assignmentText = localStorage.getItem('assignmentText');

    // Send HTML+CSS+JS panel data to the server via Ajax
    $.ajax({
      url: '/a/validate/',
      type: 'POST',
      data: {
        codeEditorInstanceId: '{{codeEditorInstanceId}}',
        htmlText: htmlText,
        cssText: cssText,
        javascriptText: javascriptText,
        assignmentText: assignmentText
      },
      // Get back code validation data
      success: function (validatorResult) {
        var arrayResultFromValidator = JSON.parse(validatorResult);

        // if the result is positive, update Validator panel
        if (arrayResultFromValidator["validatorRule1Result"] == true) {
          $('#validatorResult1Check').removeClass("fa-square");
          $('#validatorResult1Check').addClass("fa-check-square");
          $('#validatorResult1ListItem').removeClass("text-danger");
          $('#validatorResult1ListItem').addClass("text-success");
        } else {
          $('#validatorResult1Check').removeClass("fa-check-square");
          $('#validatorResult1Check').addClass("fa-square");
          $('#validatorResult1ListItem').removeClass("text-success");
          $('#validatorResult1ListItem').addClass("text-danger");
        }
      }
    });

    return;  }


  // Refresh editors - needed when we show/hide panels, otherwise cursors are off

  function refreshEditors() {
    editorInstanceForAssignment.refresh();
  }
</script>